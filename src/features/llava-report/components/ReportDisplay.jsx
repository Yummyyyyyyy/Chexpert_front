import React, { useState, useEffect } from 'react';
import { Card, Space, Typography, Divider, Tag, List, Empty, Tabs } from 'antd';
import {
  FileTextOutlined,
  ClockCircleOutlined,
  CheckCircleOutlined,
  ExperimentOutlined
} from '@ant-design/icons';
import './ReportDisplay.css';

const { Text, Title, Paragraph } = Typography;

/**
 * AI报告展示组件
 * @param {Object|Array} reports - 生成的报告数据（单个对象或数组）
 */
const ReportDisplay = ({ reports }) => {
  const [activeTab, setActiveTab] = useState('0');

  // 统一处理为数组格式
  const reportList = Array.isArray(reports) ? reports : (reports ? [reports] : []);

  // 当报告列表变化时，自动切换到最新的报告
  useEffect(() => {
    if (reportList.length > 0) {
      setActiveTab(String(reportList.length - 1));
    }
  }, [reportList.length]);

  if (reportList.length === 0) {
    return (
      <Card className="report-display-card">
        <Empty
          description="No report generated yet"
          image={Empty.PRESENTED_IMAGE_SIMPLE}
        />
      </Card>
    );
  }

  // 渲染单个报告的内容
  const renderReportContent = (report) => {
    const isLlava7b = report.modelType === 'llava-7b';

    return (
      <div className="report-display-content">
        {/* 报告标题 */}
        <div className="report-header">
          <Title level={3} style={{ margin: 0, color: '#1e40af' }}>
            {report.title}
          </Title>
          <Space size="small" style={{ marginTop: '8px' }}>
            <ClockCircleOutlined style={{ color: '#6b7280' }} />
            <Text type="secondary">{report.timestamp}</Text>
          </Space>
        </div>

        <Divider />

        {/* 诊断信息 - 仅LLaVA模型显示 */}
        {!isLlava7b && report.diagnosis && (
          <>
            <div className="report-section">
              <div className="section-header">
                <Text strong className="section-title">Diagnosis:</Text>
                <Tag color="orange" className="diagnosis-tag">
                  {report.diagnosis}
                </Tag>
              </div>
              <div className="confidence-info">
                <Text type="secondary">
                  Confidence: <strong style={{ color: '#10b981' }}>{report.confidence}%</strong>
                </Text>
              </div>
            </div>
            <Divider />
          </>
        )}

        {/* 详细分析 */}
        <div className="report-section">
          <Text strong className="section-title">Detailed Analysis:</Text>
          <Paragraph className="analysis-box" style={{ whiteSpace: 'pre-line' }}>
            {report.detailedAnalysis}
          </Paragraph>
        </div>

        {/* 医疗建议 - 仅LLaVA模型显示 */}
        {!isLlava7b && report.recommendations && report.recommendations.length > 0 && (
          <>
            <Divider />
            <div className="report-section">
              <Text strong className="section-title">Medical Recommendations:</Text>
              <List
                dataSource={report.recommendations}
                renderItem={(item) => (
                  <List.Item className="recommendation-list-item">
                    <CheckCircleOutlined style={{ color: '#10b981', marginRight: '8px' }} />
                    <Text>{item}</Text>
                  </List.Item>
                )}
                className="recommendations-list"
              />
            </div>
          </>
        )}

        {/* 自定义备注 */}
        {report.customNotes && (
          <>
            <Divider />
            <div className="report-section">
              <Text strong className="section-title">Custom Notes:</Text>
              <Paragraph className="custom-notes-box">
                {report.customNotes}
              </Paragraph>
            </div>
          </>
        )}

        <Divider />

        {/* 报告生成信息 */}
        <div className="report-footer">
          <Space>
            <ExperimentOutlined style={{ color: '#8b5cf6' }} />
            <Text type="secondary">
              Generated by: <strong>{report.generatedBy}</strong>
            </Text>
            {report.processingTime && (
              <Text type="secondary">
                | Processing time: <strong>{report.processingTime.toFixed(2)}s</strong>
              </Text>
            )}
          </Space>
        </div>
      </div>
    );
  };

  // 如果只有一个报告，直接显示
  if (reportList.length === 1) {
    return (
      <Card
        title={
          <Space>
            <FileTextOutlined style={{ color: '#059669' }} />
            <span style={{ color: '#047857' }}>Generated Medical Report</span>
          </Space>
        }
        className="report-display-card"
      >
        {renderReportContent(reportList[0])}
      </Card>
    );
  }

  // 多个报告时，使用Tabs切换
  const tabItems = reportList.map((report, index) => ({
    key: String(index),
    label: (
      <span>
        {report.modelType === 'llava-7b' ? '🤖 LLAVA-7B' : '🏥 LLaVA'}
      </span>
    ),
    children: renderReportContent(report)
  }));

  return (
    <Card
      title={
        <Space>
          <FileTextOutlined style={{ color: '#059669' }} />
          <span style={{ color: '#047857' }}>Generated Medical Reports</span>
        </Space>
      }
      className="report-display-card"
    >
      <Tabs
        activeKey={activeTab}
        onChange={setActiveTab}
        items={tabItems}
        size="large"
        type="card"
      />
    </Card>
  );
};

export default ReportDisplay;
